# Setting up the Working Directory

setwd("/Users/sandeshkey/Desktop/Hourly Weather Analysis")
getwd()


# Importing Data (CSV File : Hourly Weather Data)

weather_data <- read.csv("Hourly Weather Data.csv")

head(weather_data) #Displays top 6 rows from the data
tail(weather_data) #Displays bottom 6 rows from the data
View(weather_data) #Displays entire data in a spreadsheet


# Installing Packages

install.packages("ggplot2")
install.packages("dplyr")
install.packages("crayon")
install.packages("forecast")
install.packages("magrittr") # For Pipe Operator
install.packages("corrplot") #Unused Yet
install.packages("hexbin") # Unused Yet
install.packages("weathermetrics") # Used in preprocessing temp and dewp
install.packages("grDevices")


# Loading Packages for their use ( Using "library()" or "require()" function)
library(ggplot2)
library(dplyr)
library(crayon)
library(forecast)
library(magrittr)
library(corrplot)
library(hexbin)
library(weathermetrics)
library(grDevices)


dim(weather_data) #Displays dimension of dataset
str(weather_data) #Shows structure of dataset

names(weather_data) #Provides names of variables(columns)

attach(weather_data) #Attach Set of R Objects to Search Path

length(wind_gust) #Number of rows of Wind_gust
class(wind_gust) #Data type of wind_gust
unique(wind_dir) #Displays every unique values in wind_dir variable/column
unique(pressure) #Displays every unique values in pressure variable/column

summary(weather_data)

weather_data %>% 
  select(temp) %>% 
  count(temp) %>% 
  arrange(desc(n)) %>% 
  View()
  

# Data Pre-processing

# 1. Finding all the missing values from the dataset

sum(is.na(weather_data$origin))
sum(is.na(weather_data$year))
sum(is.na(weather_data$month))
sum(is.na(weather_data$day))
sum(is.na(weather_data$hour))
sum(is.na(weather_data$temp))
sum(is.na(weather_data$dewp))
sum(is.na(weather_data$humid))
sum(is.na(weather_data$wind_dir))
sum(is.na(weather_data$wind_speed))
sum(is.na(weather_data$wind_gust))
sum(is.na(weather_data$precip))
sum(is.na(weather_data$pressure))
sum(is.na(weather_data$visib))
sum(is.na(weather_data$time_hour))


# 2. Temperature (temp) and Dewpoint (dewp)

# Temperature conversion from Fahrenheit to Celsius
weather_data$temp <- fahrenheit.to.celsius(weather_data$temp)
weather_data$dewp <- fahrenheit.to.celsius(weather_data$dewp)





# 4. wind_speed

avg_Wind_Speed <- mean(weather_data$wind_speed,
                       na.rm = TRUE)
weather_data$wind_speed <- ifelse(
  is.na(weather_data$wind_speed),
  avg_Wind_Speed,
  weather_data$wind_speed)
sum(is.na(weather_data$wind_speed))







#  6. Pressure 

avg_Pressure <- mean(weather_data$pressure, na.rm = TRUE)
weather_data$pressure <- ifelse(
  is.na(weather_data$pressure),
  avg_Pressure,
  weather_data$pressure)
sum(is.na(weather_data$pressure))


# Setup

JFK <- filter(weather_data, origin == 'JFK')
LGA <- filter(weather_data, origin == 'LGA')
monthly_JFK <- group_by(JFK, month, day)
monthly_LGA <- group_by(LGA, month, day)









#Analysis 1 : Line Chart of Average Temperature by month in JFK and LGA
weather_data %>%
  select(origin, month, temp) %>% 
  group_by(origin, month) %>% 
  summarise(avg_Temp = mean(temp)) %>% 
  ggplot(aes(x = month, y = avg_Temp, color = origin)) +
  geom_point() +
  geom_line() +
  labs(title = 'Average Temp. by Month in JFK and LGA', x = 'Month', y = 'Temperature (c)', color = 'Origin') +
  theme(plot.title = element_text(size = 14, face = 'bold'),
        legend.position = 'top') +
  scale_x_discrete(limits = month.abb) +
  facet_wrap(~ origin, ncol = 1)


avg_Temp_JFK = summarise(monthly_JFK, avg_Temp = mean(temp))
avg_Temp_LGA = summarise(monthly_LGA, avg_Temp = mean(temp))
print(summarise(avg_Temp_JFK, highest_Temp = max(avg_Temp),
                lowest_Temp = min(avg_Temp), avg_Temp = mean(avg_Temp)))
print(summarise(avg_Temp_LGA, highest_Temp = max(avg_Temp),
                lowest_Temp = min(avg_Temp), avg_Temp = mean(avg_Temp)))











#Analysis xx :

weather_data <- max(temp)
max(dewp)


#  Scatter Plot 
ggplot(data=weather_data, mapping = aes(x=month, y=wind_speed, color=origin)) +
  geom_point(alpha=0.3) +
  stat_smooth(method = "lm") +
  facet_wrap(~origin) +
  
  scale_x_continuous(breaks = 1:12, labels = c("Jan", "Feb", "Mar", "Apr",
                                               "May", "Jun", "Jul", "Aug",
                                               "Sep", "Oct", "Nov", "Dec")) +
  labs(title = "Scatter plot of wind speed against month",
       x = "Month",
       y = "Wind Speed")



# jitter
# For Rain
weather_data %>% 
  filter(dewp>60) %>% 
  ggplot(aes(x=month, y=dewp, group=month, color=factor(month), na.omit())) +
  geom_jitter() +
  facet_wrap(~origin) +
  scale_x_continuous(breaks = 1:12, labels = c("Jan", "Feb", "Mar", "Apr",
                                               "May", "Jun", "Jul", "Aug",
                                               "Sep", "Oct", "Nov", "Dec")) +
  labs(title = "Scatter plot (Jitter) to predict Rainfall",
       x = "Month",
       y = "Dew Point")


# For Snow
weather_data %>% 
  filter(dewp<0) %>% 
  ggplot(aes(x=month, y=dewp, group=month, color=factor(month), na.omit())) +
  geom_jitter() +
  facet_wrap(~origin) +
  scale_x_continuous(breaks = 1:12, labels = c("Jan", "Feb", "Mar", "Apr",
                                               "May", "Jun", "Jul", "Aug",
                                               "Sep", "Oct", "Nov", "Dec")) +
  labs(title = "Scatter plot (Jitter) to predict Snowfall",
       x = "Month",
       y = "Dew Point")





# Analysis xx : Analyzing wind speed in non-snowy days 


# Visibility according to Snowfall

# The snow variable (column) is added later just to ...
#     demonstrate the data manipulation and visualization techniques.
# Therefore, results might not match the real life scenarios

weather_data %>% 
  select(snow, visib) %>% 
  group_by(snow) %>% 
  summarise(avg_Visib = mean(visib), .groups = 'drop')

ggplot(weather_data, aes(x=visib, y=frequency(visib), fill=factor(snow))) +
  geom_bar(width = 0.20, stat = "identity") +
  theme_bw() +
  facet_wrap(~snow) +
  labs(fill = "Snow", x="Visibility", y="Count",
       title = "Visibility according to Snowfall", subtitle = "2013")



# For ppt

#-manipulation
#--check the correlation between temperature and dew point
cor(weather_data$temp,weather_data$dewp)

#-visualization
ggplot(weather_data,aes(dewp,temp))+
  geom_jitter()+
  facet_wrap(~origin)+
  geom_smooth(method="lm")+
  labs(x="Temperature (F)", y="Dew Point",
       title = "Correlation Between Temperature and Dew Point", subtitle = "2013") +
  theme(plot.title = element_text(hjust = 0.5, size = 16, color = "deeppink4"))


# Analysis Example 12: Analyzing pressure in both airports using Histogram

#-manipulation
#--show pressure summary for both airports
weather_data%>%
  filter(origin=="JFK")%>%
  select(jfk_pressure=pressure)%>%
  summary()

weather_data%>%
  filter(origin=="LGA")%>%
  select(lga_pressure=pressure)%>%
  summary()

#-visualization
ggplot(weather_data,aes(pressure))+
  geom_histogram(bins=20,aes(group=origin,fill=origin),na.rm=TRUE)+
  labs(x="Pressure (Pa)", y="Count",
       title = "Histogram for Pressure", subtitle = "Across both airports in 2013") +
  theme(plot.title = element_text(hjust = 0.5, size = 26, color = "deeppink4"))

  

